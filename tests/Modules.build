<?xml version="1.0"?>
<project name="Monobjc Module Builder" default="build" basedir="..">
  <description>Monobjc Module Builder</description>

  <!-- ===============================================================================
  Build the tests libraries
  ================================================================================ -->
  <target name="build">
    <fail message="Please use -D:testing=true in order to build the unit tests" unless="${testing}"/>

    <if test="${version::get-minor(version::parse(min.version)) &lt;= 6}" >
      <property name="version" value="10.6"/>
      <property name="define" value="TESTING;MACOSX_10_5;MACOSX_10_6"/>
      <call target="build-tests-intern" if="${version::get-minor(version::parse(max.version)) >= 6}"/>
    </if>

    <if test="${version::get-minor(version::parse(min.version)) &lt;= 7}" >
      <property name="version" value="10.7"/>
      <property name="define" value="TESTING;MACOSX_10_5;MACOSX_10_6;MACOSX_10_7"/>
      <call target="build-tests-intern" if="${version::get-minor(version::parse(max.version)) >= 7}"/>
    </if>

    <if test="${version::get-minor(version::parse(min.version)) &lt;= 8}" >
      <property name="version" value="10.8"/>
      <property name="define" value="TESTING;MACOSX_10_5;MACOSX_10_6;MACOSX_10_7;MACOSX_10_8"/>
      <call target="build-tests-intern" if="${version::get-minor(version::parse(max.version)) >= 8}"/>
    </if>
  </target>

  <!-- ===============================================================================
  Run the tests libraries
  ================================================================================ -->
  <target name="run">
    <fail message="Please use -D:testing=true in order to run the unit tests" unless="${testing}"/>

    <if test="${version::get-minor(version::parse(min.version)) &lt;= 6}" >
      <property name="version" value="10.6"/>
      <call target="run-tests-intern" if="${version::get-minor(version::parse(max.version)) >= 6}"/>
    </if>

    <if test="${version::get-minor(version::parse(min.version)) &lt;= 7}" >
      <property name="version" value="10.7"/>
      <call target="run-tests-intern" if="${version::get-minor(version::parse(max.version)) >= 7}"/>
    </if>

    <if test="${version::get-minor(version::parse(min.version)) &lt;= 8}" >
      <property name="version" value="10.8"/>
      <call target="run-tests-intern" if="${version::get-minor(version::parse(max.version)) >= 8}"/>
    </if>
  </target>

  <!-- Build set of unit tests -->
  <target name="build-tests-intern">

    <echo message="------------------------"/>
    <echo message="Unit Tests for ${version}"/>
    <echo message="------------------------"/>

    <!-- Output dir is used to build the assemblies -->
    <property name="base.dir" value="${tests.dir}"/>
    <property name="output.dir" value="${dist.dir}/${version}"/>
    <mkdir dir="${output.dir}"/>

    <!-- Copy NUnit wrapper -->
    <copy file="${tests.dir}/nunit-${version}" todir="${output.dir}"/>
    <mkdir dir="${dist.dir}/Tests"/>

    <!-- Copy the NUnit DLLs -->
    <copy todir="${output.dir}">
      <fileset basedir="${external.dir}">
        <include name="nunit.framework.dll"/>
      </fileset>
    </copy>

    <!-- Test Monobjc -->
    <property name="test.name" value="Monobjc.Tests"/>
    <fileset id="src.references" basedir="${output.dir}">
      <include name="${base.dir}/${test.name}/**/*.cs"/>
      <include name="${base.dir}/${test.name}/**/*.cs"/>
    </fileset>
    <assemblyfileset id="lib.references" basedir="${output.dir}">
      <include name="System.dll"/>
      <include name="System.Core.dll"/>
      <include name="${external.dir}/nunit.framework.dll"/>
      <include name="${output.dir}/Monobjc.dll"/>
    </assemblyfileset>
    <call target="build-test-intern"/>

    <!-- Test Monobjc.Foundation -->
    <property name="test.name" value="Monobjc.Foundation.Tests"/>
    <fileset id="src.references" basedir="${output.dir}">
      <include name="${base.dir}/${test.name}/**/*.cs"/>
    </fileset>
    <assemblyfileset id="lib.references" basedir="${output.dir}">
      <include name="System.dll"/>
      <include name="System.Core.dll"/>
      <include name="${external.dir}/nunit.framework.dll"/>
      <include name="${output.dir}/Monobjc.dll"/>
      <include name="${output.dir}/Monobjc.Foundation.dll"/>
    </assemblyfileset>
    <call target="build-test-intern"/>

    <!-- Test Monobjc.CoreLocation -->
    <property name="test.name" value="Monobjc.CoreLocation.Tests"/>
    <fileset id="src.references" basedir="${output.dir}">
      <include name="${base.dir}/${test.name}/**/*.cs"/>
      <include name="${base.dir}/Monobjc.Foundation.Tests/Common/*.cs"/>
    </fileset>
    <assemblyfileset id="lib.references" basedir="${output.dir}">
      <include name="System.dll"/>
      <include name="System.Core.dll"/>
      <include name="${external.dir}/nunit.framework.dll"/>
      <include name="${output.dir}/Monobjc.dll"/>
      <include name="${output.dir}/Monobjc.Foundation.dll"/>
      <include name="${output.dir}/Monobjc.CoreLocation.dll"/>
    </assemblyfileset>
    <call target="build-test-intern"/>

    <!-- Test Monobjc.AppKit 
    <property name="test.name" value="Monobjc.AppKit.Tests"/>
    <fileset id="src.references" basedir="${output.dir}">
      <include name="${base.dir}/${test.name}/**/*.cs"/>
      <include name="${base.dir}/Monobjc.Foundation.Tests/Common/*.cs"/>
    </fileset>
    <assemblyfileset id="lib.references" basedir="${output.dir}">
      <include name="System.dll"/>
      <include name="System.Core.dll"/>
      <include name="${external.dir}/nunit.framework.dll"/>
      <include name="${output.dir}/Monobjc.dll"/>
      <include name="${output.dir}/Monobjc.Foundation.dll"/>
      <include name="${output.dir}/Monobjc.AppKit.dll"/>
    </assemblyfileset>
    <call target="build-test-intern"/>
    -->

    <!-- Test Monobjc.CorePlot 
    <property name="test.name" value="Monobjc.CorePlot.Tests"/>
    <fileset id="src.references" basedir="${output.dir}">
      <include name="${base.dir}/${test.name}/**/*.cs"/>
      <include name="${base.dir}/Monobjc.Foundation.Tests/Common/*.cs"/>
    </fileset>
    <assemblyfileset id="lib.references" basedir="${output.dir}">
      <include name="System.dll"/>
      <include name="System.Core.dll"/>
      <include name="${external.dir}/nunit.framework.dll"/>
      <include name="${output.dir}/Monobjc.dll"/>
      <include name="${output.dir}/Monobjc.Foundation.dll"/>
      <include name="${output.dir}/Monobjc.AppKit.dll"/>
      <include name="${output.dir}/Monobjc.CorePlot.dll"/>
    </assemblyfileset>
    <call target="build-test-intern"/>
    -->

    <!-- Test Monobjc.OpenGL 
    <property name="test.name" value="Monobjc.OpenGL.Tests"/>
    <fileset id="src.references" basedir="${output.dir}">
      <include name="${base.dir}/${test.name}/**/*.cs"/>
      <include name="${base.dir}/Monobjc.Foundation.Tests/Common/*.cs"/>
    </fileset>
    <assemblyfileset id="lib.references" basedir="${output.dir}">
      <include name="System.dll"/>
      <include name="System.Core.dll"/>
      <include name="${external.dir}/nunit.framework.dll"/>
      <include name="${output.dir}/Monobjc.dll"/>
      <include name="${output.dir}/Monobjc.Foundation.dll"/>
      <include name="${output.dir}/Monobjc.AppKit.dll"/>
      <include name="${output.dir}/Monobjc.OpenGL.dll"/>
    </assemblyfileset>
    <call target="build-test-intern"/>
    -->

    <!-- Test Monobjc.Security 
    <property name="test.name" value="Monobjc.Security.Tests"/>
    <fileset id="src.references" basedir="${output.dir}">
      <include name="${base.dir}/${test.name}/**/*.cs"/>
      <include name="${base.dir}/Monobjc.Foundation.Tests/Common/*.cs"/>
    </fileset>
    <assemblyfileset id="lib.references" basedir="${output.dir}">
      <include name="System.dll"/>
      <include name="System.Core.dll"/>
      <include name="${external.dir}/nunit.framework.dll"/>
      <include name="${output.dir}/Monobjc.dll"/>
      <include name="${output.dir}/Monobjc.Foundation.dll"/>
      <include name="${output.dir}/Monobjc.AppKit.dll"/>
      <include name="${output.dir}/Monobjc.Security.dll"/>
    </assemblyfileset>
    <call target="build-test-intern"/>
    -->

    <!-- Test Monobjc.WebKit 
    <property name="test.name" value="Monobjc.WebKit.Tests"/>
    <fileset id="src.references" basedir="${output.dir}">
      <include name="${base.dir}/${test.name}/**/*.cs"/>
      <include name="${base.dir}/Monobjc.Foundation.Tests/Common/*.cs"/>
    </fileset>
    <assemblyfileset id="lib.references" basedir="${output.dir}">
      <include name="System.dll"/>
      <include name="System.Core.dll"/>
      <include name="${external.dir}/nunit.framework.dll"/>
      <include name="${output.dir}/Monobjc.dll"/>
      <include name="${output.dir}/Monobjc.Foundation.dll"/>
      <include name="${output.dir}/Monobjc.AppKit.dll"/>
      <include name="${output.dir}/Monobjc.WebKit.dll"/>
    </assemblyfileset>
    <call target="build-test-intern"/>
    -->

  </target>

  <!-- Build unit tests -->
  <target name="build-test-intern">

    <echo message="Test ${test.name}"/>

    <!-- Compile the test -->
    <csc target="library"
         output="${output.dir}/${test.name}.dll"
         debug="${debug}"
         define="${define}">
      <sources refid="src.references"/>
      <resources prefix="${test.name}">
        <include name="${base.dir}/${test.name}/**/*.png"/>
        <include name="${base.dir}/${test.name}/**/*.nib"/>
      </resources>
      <resources prefix="${test.name}.Properties">
        <include name="${base.dir}/${test.name}/**/*.resx"/>
      </resources>
      <references refid="lib.references"/>
    </csc>

  </target>

  <!-- Run the tests libraries -->
  <target name="run-tests-intern">
    <!-- Output dir is used to run the tests -->
    <property name="output.dir" value="${dist.dir}/${version}"/>

    <!-- Run NUnit -->
    <property name="test.name" value="Monobjc.Tests"/>
    <exec program="${output.dir}/nunit-${version}" failonerror="false">
      <arg value="-labels"/>
      <arg value="-xml=${dist.dir}/Tests/${test.name}-${version}.xml"/>
      <arg value="${output.dir}/${test.name}.dll"/>
    </exec>

    <property name="test.name" value="Monobjc.Foundation.Tests"/>
    <exec program="${output.dir}/nunit-${version}" failonerror="false">
      <arg value="-labels"/>
      <arg value="-xml=${dist.dir}/Tests/${test.name}-${version}.xml"/>
      <arg value="${output.dir}/${test.name}.dll"/>
    </exec>

    <property name="test.name" value="Monobjc.CoreLocation.Tests"/>
    <exec program="${output.dir}/nunit-${version}" failonerror="false">
      <arg value="-labels"/>
      <arg value="-xml=${dist.dir}/Tests/${test.name}-${version}.xml"/>
      <arg value="${output.dir}/${test.name}.dll"/>
    </exec>

	<!--
    <property name="test.name" value="Monobjc.AppKit.Tests"/>
    <exec program="${output.dir}/nunit-${version}" failonerror="false">
      <arg value="-labels"/>
      <arg value="-xml=${dist.dir}/Tests/${test.name}-${version}.xml"/>
      <arg value="${output.dir}/${test.name}.dll"/>
    </exec>
    -->

	<!--
    <property name="test.name" value="Monobjc.CorePlot.Tests"/>
    <exec program="${output.dir}/nunit-${version}" failonerror="false">
      <arg value="-labels"/>
      <arg value="-xml=${dist.dir}/Tests/${test.name}-${version}.xml"/>
      <arg value="${output.dir}/${test.name}.dll"/>
    </exec>
    -->

	<!--
    <property name="test.name" value="Monobjc.OpenGL.Tests"/>
    <exec program="${output.dir}/nunit-${version}" failonerror="false">
      <arg value="-labels"/>
      <arg value="-xml=${dist.dir}/Tests/${test.name}-${version}.xml"/>
      <arg value="${output.dir}/${test.name}.dll"/>
    </exec>
    -->

	<!--
    <property name="test.name" value="Monobjc.Security.Tests"/>
    <exec program="${output.dir}/nunit-${version}" failonerror="false">
      <arg value="-labels"/>
      <arg value="-xml=${dist.dir}/Tests/${test.name}-${version}.xml"/>
      <arg value="${output.dir}/${test.name}.dll"/>
    </exec>
    -->

	<!--
    <property name="test.name" value="Monobjc.WebKit.Tests"/>
    <exec program="${output.dir}/nunit-${version}" failonerror="false">
      <arg value="-labels"/>
      <arg value="-xml=${dist.dir}/Tests/${test.name}-${version}.xml"/>
      <arg value="${output.dir}/${test.name}.dll"/>
    </exec>
    -->

  </target>

</project>
