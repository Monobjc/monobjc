//
// This file is part of Monobjc, a .NET/Objective-C bridge
// Copyright (C) 2007-2013 - Laurent Etiemble
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// 
using System;
using System.ComponentModel;
using System.Threading;
using Monobjc.Foundation;
using Monobjc.AppKit.Properties;

namespace Monobjc.AppKit
{
    /// <summary>
    /// Represents a delegate that can execute any method in managed code that is declared void and takes no parameters. 
    /// <para><see cref="MethodInvoker"/> provides a simple delegate that is used to invoke a method with a void parameter list. This delegate can be used when making calls to a <see cref="NSResponder"/>'s <see cref="Invoke"/> method, or when you need a simple delegate but do not want to define one yourself.</para>
    /// </summary>
    public delegate void MethodInvoker();

    public partial class NSResponder : ISynchronizeInvoke
    {
        // Assumption is made that Objective-C controls have been created on the Main Thread.
        private readonly NSThread ownerThread = NSThread.MainThread;

        ///<summary>
        /// <para>Executes the delegate on the main thread that this object executes on.</para>
        /// <para>NB: Assumption is made that Objective-C controls have been created on the Main Thread.</para>
        ///</summary>
        ///<returns>
        /// An <see cref="T:System.IAsyncResult"></see> interface that represents the asynchronous operation started by calling this method.
        ///</returns>
        ///<param name="args">An array of type <see cref="T:System.Object"></see> to pass as arguments to the given method. This can be null if no arguments are needed. </param>
        ///<param name="method">A <see cref="T:System.Delegate"></see> to a method that takes parameters of the same number and type that are contained in args. </param>
        public IAsyncResult BeginInvoke(Delegate method, params Object[] args)
        {
            NSResponderThreadInvoker invoker = null;
            try
            {
                invoker = new NSResponderThreadInvoker(method, args);
                invoker.PerformSelectorOnThreadWithObjectWaitUntilDone(ObjectiveCRuntime.Selector("asyncInvoke:"), this.ownerThread, invoker, false);
                return invoker.AsyncResult;
            }
            finally
            {
                invoker.SafeRelease();
            }
        }

        ///<summary>
        /// <para>Waits until the process started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])"></see> completes, and then returns the value generated by the process.</para>
        /// <para>NB: Assumption is made that Objective-C controls have been created on the Main Thread.</para>
        ///</summary>
        ///<returns>
        /// An <see cref="T:System.Object"></see> that represents the return value generated by the asynchronous operation.
        ///</returns>
        ///<param name="result">An <see cref="T:System.IAsyncResult"></see> interface that represents the asynchronous operation started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])"></see>. </param>
        public Object EndInvoke(IAsyncResult result)
        {
            NSResponderAsyncResult asyncResult = result as NSResponderAsyncResult;
            if (asyncResult == null)
            {
                throw new ArgumentException(Resources.AsynchronousResultMustBeNSResponderAsyncResult, "result");
            }
            return asyncResult.ReturnValue;
        }

        ///<summary>
        /// <para>Executes the delegate on the main thread that this object executes on.</para>
        /// <para>NB: Assumption is made that Objective-C controls have been created on the Main Thread.</para>
        ///</summary>
        ///<returns>
        /// An <see cref="T:System.Object"></see> that represents the return value from the delegate being invoked, or null if the delegate has no return value.
        ///</returns>
        ///<param name="args">An array of type <see cref="T:System.Object"></see> that represents the arguments to pass to the given method. This can be null if no arguments are needed. </param>
        ///<param name="method">A <see cref="T:System.Delegate"></see> that contains a method to call, in the context of the thread for the control. </param>
        public Object Invoke(Delegate method, params Object[] args)
        {
            NSResponderThreadInvoker invoker = null;
            try
            {
                invoker = new NSResponderThreadInvoker(method, args);
                invoker.PerformSelectorOnThreadWithObjectWaitUntilDone(ObjectiveCRuntime.Selector("syncInvoke:"), this.ownerThread, invoker, true);
                return invoker.ReturnValue;
            }
            finally
            {
                invoker.SafeRelease();
            }
        }

        ///<summary>
        /// <para>Gets a value indicating whether the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])"></see> when calling an object that implements this interface.</para>
        /// <para>NB: Assumption is made that Objective-C controls have been created on the Main Thread.</para>
        ///</summary>
        ///<returns>
        ///true if the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])"></see>; otherwise, false.
        ///</returns>
        public bool InvokeRequired
        {
            get { return (!NSThread.CurrentThread.Equals(this.ownerThread)); }
        }

        /// <summary>
        /// This invoker will bridge the .NET invocation in a Objective-C context.
        /// </summary>
        [ObjectiveCClass]
        public class NSResponderThreadInvoker : NSObject
        {
            private readonly Delegate method;
            private readonly Object[] args;

            /// <summary>
            /// Initializes a new instance of the <see cref="NSResponderThreadInvoker"/> class.
            /// </summary>
            public NSResponderThreadInvoker()
            {
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="NSResponderThreadInvoker"/> class.
            /// </summary>
            /// <param name="nativePointer">The native pointer.</param>
            public NSResponderThreadInvoker(IntPtr nativePointer) : base(nativePointer)
            {
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="NSResponderThreadInvoker"/> class.
            /// </summary>
            /// <param name="method">The method.</param>
            /// <param name="args">The args.</param>
            public NSResponderThreadInvoker(Delegate method, params Object[] args)
            {
                this.AsyncResult = new NSResponderAsyncResult(this);
                this.method = method;
                this.args = args;
            }

            /// <summary>
            /// Invokes the specified instance synchronously.
            /// </summary>
            /// <param name="arg">The arg.</param>
            [ObjectiveCMessage("syncInvoke:")]
            public void SyncInvoke(Id arg)
            {
                this.ReturnValue = this.method.DynamicInvoke(this.args);
                this.AsyncResult.CompletedSynchronously = true;
                this.AsyncResult.IsCompleted = true;
            }

            /// <summary>
            /// Invokes the specified instance asynchronously.
            /// </summary>
            /// <param name="arg">The arg.</param>
            [ObjectiveCMessage("asyncInvoke:")]
            public void AsyncInvoke(Id arg)
            {
                this.ReturnValue = this.method.DynamicInvoke(this.args);
                this.AsyncResult.CompletedSynchronously = false;
                this.AsyncResult.IsCompleted = true;
            }

            /// <summary>
            /// Gets the async result associated with this instance.
            /// </summary>
            /// <value>The async result.</value>
            public NSResponderAsyncResult AsyncResult { get; private set; }

            /// <summary>
            /// Gets the return value of a call.
            /// </summary>
            /// <value>The return value.</value>
            public object ReturnValue { get; private set; }
        }

        /// <summary>
        /// An implementation of <see cref="IAsyncResult"/> for <see cref="NSResponderThreadInvoker"/>.
        /// The two classes are paired to manage the synchronous/asynchronous call.
        /// </summary>
        public class NSResponderAsyncResult : IAsyncResult
        {
            private readonly ManualResetEvent mre;
            private bool isCompleted;

            /// <summary>
            /// Initializes a new instance of the <see cref="NSResponderAsyncResult"/> class.
            /// </summary>
            /// <param name="invoker">The invoker.</param>
            public NSResponderAsyncResult(NSResponderThreadInvoker invoker)
            {
                this.mre = new ManualResetEvent(false);
                this.Invoker = invoker;
            }

            /// <summary>
            /// Gets an indication whether the asynchronous operation has completed.
            /// </summary>
            /// <returns>
            /// true if the operation is complete; otherwise, false.
            /// </returns>
            /// <filterpriority>2</filterpriority>
            public bool IsCompleted
            {
                get { return this.isCompleted; }
                set
                {
                    this.isCompleted = value;
                    this.mre.Set();
                }
            }

            /// <summary>
            /// Gets a <see cref="T:System.Threading.WaitHandle"></see> that is used to wait for an asynchronous operation to complete.
            /// </summary>
            /// <returns>
            /// A <see cref="T:System.Threading.WaitHandle"></see> that is used to wait for an asynchronous operation to complete.
            /// </returns>
            /// <filterpriority>2</filterpriority>
            public WaitHandle AsyncWaitHandle
            {
                get { return this.mre; }
            }

            /// <summary>
            /// Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            /// </summary>
            /// <returns>
            /// A user-defined object that qualifies or contains information about an asynchronous operation.
            /// </returns>
            /// <filterpriority>2</filterpriority>
            public object AsyncState { get; set; }

            /// <summary>
            /// Gets an indication of whether the asynchronous operation completed synchronously.
            /// </summary>
            /// <returns>
            /// true if the asynchronous operation completed synchronously; otherwise, false.
            /// </returns>
            /// <filterpriority>2</filterpriority>
            public bool CompletedSynchronously { get; set; }

            /// <summary>
            /// Gets the invoker that owns this instance.
            /// </summary>
            /// <value>The invoker.</value>
            public NSResponderThreadInvoker Invoker { get; private set; }

            /// <summary>
            /// Gets the return value of the asynchronous call only if it has completed.
            /// </summary>
            /// <value>The return value.</value>
            public Object ReturnValue
            {
                get
                {
                    this.mre.WaitOne();
                    return this.Invoker.ReturnValue;
                }
            }
        }
    }
}