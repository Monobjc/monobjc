<?xml version="1.0"?>
<project name="Monobjc" default="build" basedir=".">
  <description>Monobjc Build File</description>

  <!-- Define properties -->
  <property name="external.dir" value="${path::get-full-path('./external')}"/>
  <property name="libraries.dir" value="${path::get-full-path('./libraries')}"/>
  <property name="native.dir" value="${path::get-full-path('./native')}"/>
  <property name="tests.dir" value="${path::get-full-path('./tests')}"/>
  <property name="tools.dir" value="${path::get-full-path('./tools')}"/>
  <property name="build.dir" value="${path::get-full-path('./build')}"/>
  <property name="dist.dir" value="${path::get-full-path('./dist')}"/>
  <property name="binaries.dir" value="${dist.dir}"/>

  <property name="keyfile" value="Monobjc.snk"/>

  <property name="define" value=""/>
  <property name="debug" value="false"/>
  <property name="testing" value="false"/>

  <property name="min.version" value="10.5"/>
  <property name="max.version" value="10.6"/>

  <property name="strip.sources" value="${file::exists('strip.sh')}"/>

  <!-- ===============================================================================
  Build all the bridge
  ================================================================================ -->
  <target name="build" depends="build-libraries">
  </target>

  <!-- ===============================================================================
  Build the native binaries
  ================================================================================ -->
  <target name="build-native" depends="prepare">
    <!-- Build the custom runtimes -->
    <nant buildfile="${native.dir}/Modules.build" if="${platform::is-unix()}"/>
  </target>

  <!-- ===============================================================================
  Build the tools libraries
  ================================================================================ -->
  <target name="build-tools" depends="prepare,build-native">
    <nant buildfile="${tools.dir}/Monobjc.Tools.build" inheritall="true"/>
  </target>

  <!-- ===============================================================================
  Build the bridge libraries
  ================================================================================ -->
  <target name="build-libraries" depends="prepare,build-native">
    <nant buildfile="${libraries.dir}/Modules.build"/>
  </target>

  <!-- ===============================================================================
  Build the unit tests
  ================================================================================ -->
  <target name="build-tests" depends="build-libraries">
    <nant buildfile="${tests.dir}/Modules.build"/>
  </target>

  <!-- ===============================================================================
  Run the unit tests
  ================================================================================ -->
  <target name="run-tests" depends="build-tests">
    <nant buildfile="${tests.dir}/Modules.build" target="run"/>
  </target>

  <!-- Prepare the directories -->
  <target name="prepare">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${dist.dir}"/>

    <!-- Compute the revision -->
    <property name="revision" value="${timespan::get-days(datetime::now() - datetime::parse('2007-07-01'))}"/>
  </target>

  <!-- Clean the directories -->
  <target name="clean">
    <delete dir="${build.dir}" failonerror="false" />
    <delete dir="${dist.dir}" failonerror="false" />
	
    <!-- Clean modules -->
    <nant buildfile="${libraries.dir}/Modules.build" target="clean"/>

    <!-- Clean sub-projects -->
    <nant buildfile="${tools.dir}/Monobjc.Tools.build" target="clean"/>
  </target>

  <!-- ===============================================================================
  Package an archive with the sources and the binaries
  ================================================================================ -->
  <target name="distribute" description="Package an archive with the sources and the binaries" depends="build-tools,build-libraries">
    <!-- Remove copyrighted documentation from source files -->
    <exec program="strip.sh" if="${strip.sources}"/>
    <property name="libraries.stripped.dir" value="stripped.libraries"/>
    <property name="tar.prefix" value="Monobjc-3.0.${revision}"/>

    <!-- Archive content -->
    <tar compression="GZip" destfile="${tar.prefix}.tar.gz">
      <fileset basedir="." prefix="${tar.prefix}">
        <include name="GPL.rtf"/>
        <include name="MIT.rtf"/>
        <include name="LGPL.rtf"/>
        <include name="Monobjc.build"/>
        <include name="Monobjc.sh"/>
        <include name="Monobjc.sln"/>
        <include name="Monobjc.snk"/>
        <include name="${dist.dir}/Monobjc.Tools.dll"/>
        <include name="${dist.dir}/Monobjc.NAnt.dll"/>
        <include name="${dist.dir}/10.*/Monobjc*.dll"/>
        <include name="${dist.dir}/10.*/Monobjc*.xml"/>
        <include name="${dist.dir}/10.*/runtime"/>
        <include name="${dist.dir}/10.*/*.dylib"/>
        <include name="${external.dir}/nunit.framework.dll"/>
      </fileset>
      <fileset basedir="." prefix="${tar.prefix}">
        <include name="${libraries.dir}/Monobjc/**"/>
        <exclude name="${libraries.dir}/Monobjc/**/bin/**"/>
        <exclude name="${libraries.dir}/Monobjc/**/obj/**"/>
        <exclude name="${libraries.dir}/Monobjc/**/*.pidb"/>
        <exclude name="${libraries.dir}/Monobjc/**/*.user"/>
      </fileset>
      <fileset basedir="${libraries.dir}" prefix="${tar.prefix}/libraries">
        <include name="**" unless="${strip.sources}"/>
        <exclude name="Monobjc/**"/>
        <exclude name="**/bin/**" unless="${strip.sources}"/>
        <exclude name="**/obj/**" unless="${strip.sources}"/>
        <exclude name="**/*.pidb" unless="${strip.sources}"/>
        <exclude name="**/*.user" unless="${strip.sources}"/>
      </fileset>
      <fileset basedir="${libraries.stripped.dir}" prefix="${tar.prefix}/libraries">
        <include name="**" if="${strip.sources}"/>
        <exclude name="Monobjc/**"/>
        <exclude name="**/bin/**" if="${strip.sources}"/>
        <exclude name="**/obj/**" if="${strip.sources}"/>
        <exclude name="**/*.pidb" if="${strip.sources}"/>
        <exclude name="**/*.user" if="${strip.sources}"/>
      </fileset>
    </tar>
  </target>

</project>
