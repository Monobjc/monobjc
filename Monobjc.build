<?xml version="1.0"?>
<project name="Monobjc" default="build" basedir=".">
  <description>Monobjc Build File</description>

  <property name="nant.settings.currentframework" value="mono-4.0"/>
  
  <!-- Define properties -->
  <property name="external.dir" value="${path::get-full-path('./external')}"/>
  <property name="libraries.dir" value="${path::get-full-path('./libraries')}"/>
  <property name="native.dir" value="${path::get-full-path('./native')}"/>
  <property name="package.dir" value="${path::get-full-path('./package')}"/>
  <property name="samples.dir" value="${path::get-full-path('./samples')}"/>
  <property name="tests.dir" value="${path::get-full-path('./tests')}"/>
  <property name="tools.dir" value="${path::get-full-path('./tools')}"/>
  <property name="build.dir" value="${path::get-full-path('./build')}"/>
  <property name="dist.dir" value="${path::get-full-path('./dist')}"/>
  <property name="binaries.dir" value="${dist.dir}"/>

  <property name="key.file" value="Monobjc.snk"/>
  <property name="marker.file" value="${libraries.dir}/.generator"/>

  <property name="define" value=""/>
  <property name="debug" value="false"/>
  <property name="testing" value="false"/>

  <property name="monobjc.version" value="4.0"/>
  <property name="min.version" value="10.5"/>
  <property name="max.version" value="10.7"/>
  
  <property name="native.archs" value="i386" unless="${property::exists('native.archs')}"/>

  <property name="strip.sources" value="${file::exists('strip.sh')}"/>

  <!-- ===============================================================================
  Build all the bridge
  ================================================================================ -->
  <target name="build" depends="build-libraries">
  </target>

  <!-- ===============================================================================
  Build the native binaries
  ================================================================================ -->
  <target name="build-native" depends="prepare">
    <!-- Build the custom runtimes -->
    <nant buildfile="${native.dir}/Modules.build" if="${platform::is-unix()}"/>
  </target>

  <!-- ===============================================================================
  Build the tools libraries
  ================================================================================ -->
  <target name="build-tools" depends="prepare,build-native">
    <nant buildfile="${tools.dir}/Monobjc-Tools.build" inheritall="true"/>
  </target>

  <!-- ===============================================================================
  Build the bridge libraries
  ================================================================================ -->
  <target name="build-libraries" depends="prepare,build-native">
    <nant buildfile="${libraries.dir}/Modules.build"/>
  </target>

  <!-- ===============================================================================
  Build the unit tests
  ================================================================================ -->
  <target name="build-tests" depends="build-libraries">
    <nant buildfile="${tests.dir}/Modules.build"/>
  </target>

  <!-- ===============================================================================
  Run the unit tests
  ================================================================================ -->
  <target name="run-tests" depends="build-tests">
    <nant buildfile="${tests.dir}/Modules.build" target="run"/>
  </target>

  <!-- ===============================================================================
  Build an archive with the sources and the binaries
  ================================================================================ -->
  <target name="tarball" description="Builds an archive with the sources and the binaries" depends="archive">
    <property name="archive.prefix" value="Monobjc-${monobjc.version}.${revision}.0"/>

    <!-- Archive content -->
    <tar compression="GZip" destfile="${archive.prefix}.tar.gz">
      <fileset basedir="${archive.prefix}" prefix="${archive.prefix}">
        <include name="**/*"/>
      </fileset>
    </tar>
  </target>

  <!-- ===============================================================================
  Build an installable package from the archive
  ================================================================================ -->
  <target name="package" description="Build an installable package from the archive" depends="archive">
    <property name="archive.prefix" value="Monobjc-${monobjc.version}.${revision}.0"/>
    
    <!-- Prepare the content -->
    <copy todir="${package.dir}/content">
      <fileset basedir="${archive.prefix}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Retrieve the NAnt package -->
    <get src="http://downloads.monobjc.net/NAnt.tar.gz" dest="${package.dir}/content/NAnt.tar.gz"/>
    
    <!-- Prepare the scripts -->
    <echo file="${package.dir}/content/Install_Monobjc.sh"><![CDATA[#!/bin/bash
cd "$2"
chmod a+x ./Monobjc.sh
sudo ./Monobjc.sh install
]]></echo>
    <echo file="${package.dir}/content/Install_NAnt.sh"><![CDATA[#!/bin/bash
ARCHIVE="$2/NAnt.tar.gz"
cd "/Library/Frameworks/Mono.framework/Home/share"
BACKUP="NAnt-"$(date +"%Y%m%d-%H%M%S")
sudo mv NAnt "$BACKUP"
sudo tar -zxf "$ARCHIVE"
chown -R root:admin NAnt
]]></echo>
    <echo file="${package.dir}/content/Install_Monobjc_NAnt.sh"><![CDATA[#!/bin/bash
cd "$2"
chmod a+x ./Monobjc.sh
sudo ./Monobjc.sh install_nant
]]></echo>
    <echo file="${package.dir}/content/Install_Monobjc_MSBuild.sh"><![CDATA[#!/bin/bash
cd "$2"
chmod a+x ./Monobjc.sh
sudo ./Monobjc.sh install_msbuild
]]></echo>
    <exec program="chmod">
      <arg value="a+x"/>
      <arg value="${package.dir}/content/Monobjc.sh"/>
      <arg value="${package.dir}/content/Install_Monobjc.sh"/>
      <arg value="${package.dir}/content/Install_Monobjc_NAnt.sh"/>
      <arg value="${package.dir}/content/Install_Monobjc_MSBuild.sh"/>
      <arg value="${package.dir}/content/Install_NAnt.sh"/>
    </exec>

  <!-- Copy the package settings -->
  <copy todir="${package.dir}/${archive.prefix}.pmdoc">
    <fileset basedir="${package.dir}/Monobjc.pmdoc">
      <include name="**/*"/>
    </fileset>
    <filterchain>
      <replacestring from="version>1.0" to="version>${monobjc.version}.${revision}" />
    </filterchain>
  </copy>
  
  <!-- Build the package -->
  <exec program="/Developer/usr/bin/packagemaker">
    <arg value="--verbose"/>
    <arg value="--doc"/>
    <arg value="${package.dir}/${archive.prefix}.pmdoc"/>
    <arg value="-o"/>
    <arg value="${archive.prefix}.pkg"/>
  </exec>
 
  </target>

  <!-- Prepare the directories -->
  <target name="prepare">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${dist.dir}"/>

    <!-- Compute the revision based on when everything started -->
    <property name="revision" value="${timespan::get-days(datetime::now() - datetime::parse('2007-07-01'))}"/>
    
  </target>

  <!-- Clean the directories -->
  <target name="clean">
    <delete dir="${build.dir}" failonerror="false" />
    <delete dir="${dist.dir}" failonerror="false" />
    <delete dir="${package.dir}/content" failonerror="false" />

    <!-- Clean sub-projects -->
    <nant buildfile="${tools.dir}/Monobjc-Tools.build" target="clean"/>
  </target>

  <!-- Archive the files -->
  <target name="archive" description="Archive the files" depends="build-tools,build-libraries">
    <property name="archive.prefix" value="Monobjc-${monobjc.version}.${revision}.0"/>
    <exec program="strip.sh" if="${strip.sources}"/>
    <property name="libraries.stripped.dir" value="stripped/libraries"/>
    
    <mkdir dir="${archive.prefix}"/>
    <copy todir="${archive.prefix}">
      <fileset basedir=".">
        <include name="GPL.rtf"/>
        <include name="MIT.rtf"/>
        <include name="LGPL.rtf"/>
        <include name="Monobjc.build"/>
        <include name="Monobjc.sh"/>
        <include name="Monobjc.sln"/>
        <include name="Monobjc.snk"/>
        <include name="${dist.dir}/monobjc*"/>
        <include name="${dist.dir}/Monobjc*.exe"/>
        <include name="${dist.dir}/Monobjc*.dll"/>
        <include name="${dist.dir}/Monobjc*.targets"/>
        <include name="${dist.dir}/Monobjc*.tasks"/>
        <include name="${dist.dir}/10.*/Monobjc*.dll"/>
        <include name="${dist.dir}/10.*/Monobjc*.xml"/>
        <include name="${dist.dir}/10.*/policy*.dll"/>
        <include name="${dist.dir}/10.*/runtime"/>
        <include name="${dist.dir}/10.*/*.h"/>
        <include name="${dist.dir}/10.*/*.dylib"/>
        <include name="${external.dir}/nunit.framework.dll"/>
        <include name="${marker.file}"/>
      </fileset>
    </copy>
    <copy todir="${archive.prefix}">
      <fileset basedir=".">
        <include name="${libraries.dir}/Monobjc/**/*.cs"/>
        <include name="${libraries.dir}/Monobjc/**/*.csproj"/>
        <include name="${libraries.dir}/Monobjc/**/*.resx"/>
      </fileset>
    </copy>
    <copy todir="${archive.prefix}">
      <fileset basedir=".">
        <include name="${tests.dir}/**/*.cs"/>
        <include name="${tests.dir}/**/*.csproj"/>
        <include name="${tests.dir}/**/*.resx"/>
      </fileset>
    </copy>
    <copy todir="${archive.prefix}">
      <fileset basedir=".">
        <include name="${samples.dir}/**/*"/>
        <exclude name="${samples.dir}/.git/**"/>
        <exclude name="${samples.dir}/**/*.user"/>
        <exclude name="${samples.dir}/**/*.pidb"/>
        <exclude name="${samples.dir}/**/bin/"/>
        <exclude name="${samples.dir}/**/obj/"/>
      </fileset>
    </copy>
    <copy todir="${archive.prefix}/libraries">
      <fileset basedir="${libraries.dir}">
        <include name="**/*.cs" unless="${strip.sources}"/>
        <include name="**/*.csproj" unless="${strip.sources}"/>
        <include name="**/*.resx" unless="${strip.sources}"/>
        <exclude name="Monobjc/**"/>
      </fileset>
    </copy>
    <copy todir="${archive.prefix}/libraries">
      <fileset basedir="${libraries.stripped.dir}">
        <include name="**/*.cs" if="${strip.sources}"/>
        <include name="**/*.csproj" if="${strip.sources}"/>
        <include name="**/*.resx" if="${strip.sources}"/>
        <exclude name="Monobjc/**"/>
      </fileset>
    </copy>
    
  </target>

</project>
